pipeline {
    agent {
        docker {
            image 'mcr.microsoft.com/dotnet/sdk:6.0' // Usa una imagen oficial de .NET SDK
            args '-u root:root' // Permite instalar o escribir si hace falta
        }
    }

    environment {
        DOTNET_CLI_TELEMETRY_OPTOUT = '1'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
    }

    options {
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Clonando el repositorio...'
                checkout scm
            }
        }

        stage('Restaurar dependencias') {
            steps {
                sh 'dotnet restore anotaciones/main.csproj'
                sh 'dotnet restore anotaciones/tests.csproj'
            }
        }

        stage('Compilar') {
            steps {
                sh 'dotnet build anotaciones/main.csproj --configuration Release'
            }
        }

        stage('Ejecutar Tests') {
            steps {
                sh 'dotnet test anotaciones/test.csproj --configuration Release --logger "trx;LogFileName=test-results.trx"'
            }
}

        stage('Publicar resultados de test') {
            steps {
                echo 'Publicando resultados de test en formato JUnit (desde TRX)...'
                junit 'TestResults/test_results.trx'
            }
        }
    }

    post {
        success {
            echo 'Pipeline finalizada con éxito.'
        }

        failure {
            echo 'La compilación o pruebas fallaron.'
        }
    }
}
